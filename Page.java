/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package statictics;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static java.util.Collections.list;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import static javafx.scene.input.KeyCode.T;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import static java.util.Collections.list;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import static javafx.scene.input.KeyCode.T;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;





/**
 *
 * @author gayeu
 */
public class Page extends javax.swing.JFrame {

    /**
     * Creates new form Page
     */
    public Page() {
        initComponents();
        baglan();
        jTable1.setModel(table);
        jList1.setModel(outlierListModel);
        table.setColumnIdentifiers(new String[]{"Paintings", "Name"});
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jTable1.setVisible(false);
        jList1.setVisible(false);
    }

    ArrayList<Integer> numbers = new ArrayList<>();
    double standartDeviation = 0, Sd_sample = 0;
    double p_median = 0;
    double population_mean = 0, sd_c = 0.0;
    double sample_variance, population_variance;
    double q1, q2, q3 = 0;
    double min, max = 0.0;
    DefaultTableModel table = new DefaultTableModel();
    DefaultListModel outlierListModel = new DefaultListModel();

    void baglan() {
        try {
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/sample", "app", "app");
            Statement s = con.createStatement();
            ResultSet rs = s.executeQuery("select PAINTINGS FROM ARTWORKS");
            while (rs.next()) {
                numbers.add(rs.getInt("PAINTINGS"));

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Something wrong,try again....");
        }
    }

    void sortedFunc(int dizi[]) {
        for (int i = 0; i < numbers.size(); i++) {
            dizi[i] = numbers.get(i);
        }
        Arrays.sort(dizi);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        text_txt = new javax.swing.JTextField();
        label_txt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        step_eight = new javax.swing.JButton();
        con_interval_variance = new javax.swing.JButton();
        Histogram_button = new javax.swing.JButton();
        boxplot_button = new javax.swing.JButton();
        median_button = new javax.swing.JButton();
        variance_button = new javax.swing.JButton();
        find_shape_button = new javax.swing.JButton();
        mean_button = new javax.swing.JButton();
        data_button = new javax.swing.JButton();
        standartDeviation_button = new javax.swing.JButton();
        outliers_button = new javax.swing.JButton();
        StandartError_button = new javax.swing.JButton();
        con_interval_button = new javax.swing.JButton();
        clear_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane2.setLayout(new java.awt.GridBagLayout());

        label_txt.setBackground(new java.awt.Color(255, 204, 204));
        label_txt.setForeground(new java.awt.Color(153, 0, 51));
        label_txt.setText("label_text");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setViewportView(jList1);

        step_eight.setForeground(new java.awt.Color(153, 0, 0));
        step_eight.setText("Margin");
        step_eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                step_eightActionPerformed(evt);
            }
        });

        con_interval_variance.setForeground(new java.awt.Color(153, 0, 0));
        con_interval_variance.setText("Con. Interval Variance");
        con_interval_variance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                con_interval_varianceActionPerformed(evt);
            }
        });

        Histogram_button.setForeground(new java.awt.Color(153, 0, 0));
        Histogram_button.setText("Histogram");
        Histogram_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Histogram_buttonActionPerformed(evt);
            }
        });

        boxplot_button.setForeground(new java.awt.Color(153, 0, 0));
        boxplot_button.setText("Boxplot");
        boxplot_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxplot_buttonActionPerformed(evt);
            }
        });

        median_button.setForeground(new java.awt.Color(153, 0, 0));
        median_button.setText("Median");
        median_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        median_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                median_buttonActionPerformed(evt);
            }
        });

        variance_button.setForeground(new java.awt.Color(153, 0, 0));
        variance_button.setText("Variance");
        variance_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        variance_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variance_buttonActionPerformed(evt);
            }
        });

        find_shape_button.setForeground(new java.awt.Color(153, 0, 0));
        find_shape_button.setText("Shape");
        find_shape_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        find_shape_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_shape_buttonActionPerformed(evt);
            }
        });

        mean_button.setForeground(new java.awt.Color(153, 0, 0));
        mean_button.setText("Find mean");
        mean_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mean_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mean_buttonActionPerformed(evt);
            }
        });

        data_button.setForeground(new java.awt.Color(153, 0, 0));
        data_button.setText("Data");
        data_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        data_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                data_buttonActionPerformed(evt);
            }
        });

        standartDeviation_button.setForeground(new java.awt.Color(153, 0, 0));
        standartDeviation_button.setText("Standart Deviation");
        standartDeviation_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        standartDeviation_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standartDeviation_buttonActionPerformed(evt);
            }
        });

        outliers_button.setForeground(new java.awt.Color(153, 0, 0));
        outliers_button.setText("Outliers");
        outliers_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        outliers_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outliers_buttonActionPerformed(evt);
            }
        });

        StandartError_button.setForeground(new java.awt.Color(153, 0, 0));
        StandartError_button.setText("Standart Error");
        StandartError_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        StandartError_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StandartError_buttonActionPerformed(evt);
            }
        });

        con_interval_button.setForeground(new java.awt.Color(153, 0, 0));
        con_interval_button.setText("Confidence Interval");
        con_interval_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                con_interval_buttonActionPerformed(evt);
            }
        });

        clear_button.setForeground(new java.awt.Color(153, 0, 0));
        clear_button.setText("Clear");
        clear_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(label_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(step_eight, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(boxplot_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Histogram_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(outliers_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(StandartError_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(standartDeviation_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(variance_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(median_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mean_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(con_interval_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(con_interval_variance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(find_shape_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(data_button, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clear_button, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(text_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 531, Short.MAX_VALUE)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(text_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(184, 184, 184)
                        .addComponent(data_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(clear_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mean_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(median_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(variance_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(standartDeviation_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StandartError_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(find_shape_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outliers_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(Histogram_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(boxplot_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(con_interval_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(step_eight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(con_interval_variance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(475, 475, 475))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mean_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mean_buttonActionPerformed

        double sum = 0.0;
        for (int i = 0; i < numbers.size(); i++) {
            sum += numbers.get(i);
        }
        population_mean = (sum / (double) numbers.size());
        text_txt.setText(String.valueOf(population_mean));
        label_txt.setText("Mean: ");
    }//GEN-LAST:event_mean_buttonActionPerformed

    private void median_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_median_buttonActionPerformed
        int lenght = numbers.size();
        int[] sortedList = new int[lenght];
        sortedFunc(sortedList);
//tek çift kontrolu 
        if (lenght % 2 == 0) { //even
            p_median = (sortedList[(lenght - 1) / 2] + sortedList[lenght / 2]) / 2.0;  //120 ve 126 verisini toplar ve ikiye böler 
        } else {
            p_median = sortedList[(lenght + 1) / 2] / 1.0;
        }
        label_txt.setText("Median: ");
        text_txt.setText(String.valueOf(p_median));
    }//GEN-LAST:event_median_buttonActionPerformed

    private void variance_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variance_buttonActionPerformed

        int lenght = numbers.size();
        double varSum = 0.0;

        for (int i = 0; i < numbers.size(); i++) {
            varSum += numbers.get(i);
        }
        double mean = (double) varSum / (double) lenght;
        varSum = 0.0;

        for (int i = 0; i < lenght; i++) {
            varSum += Math.pow((numbers.get(i) - mean), 2);
        }

        sample_variance = varSum / (numbers.size() - 1);

        population_variance = (double) varSum / lenght;
        label_txt.setText("Population Variance: ");
        text_txt.setText(String.valueOf(new DecimalFormat("##.###").format(population_variance)));
    }//GEN-LAST:event_variance_buttonActionPerformed

    private void standartDeviation_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standartDeviation_buttonActionPerformed

        if (population_mean == 0) {
            double sum = 0.0;
            for (int i = 0; i < numbers.size(); i++) {
                sum += numbers.get(i);
            }
            population_mean = (sum / (double) numbers.size());
        }

        int len = numbers.size();
        double sum = 0.0, result = 0;;

        for (int i = 0; i < numbers.size(); i++) {
            result += Math.pow(numbers.get(i) - population_mean, 2);
        }

        standartDeviation = Math.sqrt(result / len);
        label_txt.setText("Population Standart Deviation: ");
        text_txt.setText(String.valueOf(new DecimalFormat("##.###").format(standartDeviation)));


    }//GEN-LAST:event_standartDeviation_buttonActionPerformed

    private void StandartError_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandartError_buttonActionPerformed
        if (population_mean == 0 || standartDeviation == 0) {
            double sum = 0.0;
            int len = numbers.size();
            double result = 0;

            for (int i = 0; i < numbers.size(); i++) {
                sum += numbers.get(i);
            }
            population_mean = (sum / (double) numbers.size());

            for (int i = 0; i < numbers.size(); i++) {
                result += Math.pow(numbers.get(i) - population_mean, 2);
            }
            standartDeviation = Math.sqrt(result / len);
        }

        double error = standartDeviation / (double) Math.sqrt(numbers.size());
        label_txt.setText("Standart Error");
        text_txt.setText(String.valueOf(new DecimalFormat("##.###").format(error)));

    }//GEN-LAST:event_StandartError_buttonActionPerformed

    private void find_shape_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_shape_buttonActionPerformed
        if (population_mean == 0 || p_median == 0) {
            double sum = 0.0;
            int lenght = numbers.size();
            int[] sortedList = new int[lenght];
            for (int i = 0; i < numbers.size(); i++) {
                sortedList[i] = numbers.get(i);
                sum += sortedList[i];
            }
            sortedFunc(sortedList);
            if (lenght % 2 == 0) { //çift even
                p_median = (sortedList[(lenght - 1) / 2] + sortedList[lenght / 2]) / 2.0;
            } else {
                p_median = sortedList[(lenght + 1) / 2 - 1] / 1.0;
            }
            population_mean = sum / (double) numbers.size();
        }
        if (population_mean == p_median) {
            text_txt.setText(" ");
            text_txt.setText("Symmetric");
        } else if (population_mean > p_median) {
            text_txt.setText("Right Skewed");
        } else if (population_mean < p_median) {
            text_txt.setText("Left Skewed");
        } else {
            text_txt.setText("Error");
        }
        label_txt.setText("Shape: ");
    }//GEN-LAST:event_find_shape_buttonActionPerformed

    private void outliers_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outliers_buttonActionPerformed
        jList1.setVisible(true);
        jList1.removeAll();
        int lenght = numbers.size();
        int[] sortedList = new int[lenght];

        sortedFunc(sortedList);
        if (p_median == 0) {
            if (lenght % 2 == 0) { //çift even
                p_median = (sortedList[(lenght - 1) / 2] + sortedList[lenght / 2]) / 2.0;
            } else {
                p_median = sortedList[(lenght + 1) / 2 - 1] / 1.0;
            }
        }
        q2 = p_median;
        ArrayList q1_list = new ArrayList();
        ArrayList q3_list = new ArrayList();
        for (int i = 0; i < sortedList.length; i++) {
            if (sortedList[i] < q2) {
                q1_list.add(i, sortedList[i]);
            }
            if (sortedList[i] > q2) {
                q3_list.add(sortedList[i]);
            }
        }
        if (q1_list.size() % 2 == 0) { //çift even
            q1 = ((int) q1_list.get((q1_list.size() - 1) / 2) + (int) q1_list.get(q1_list.size() / 2)) / 2.0; //n-1/2 ve n/2 aralığında veriler toplanır ve 2 ye bölünür
        } else {
            q1 = (int) q1_list.get(((q1_list.size() + 1) / 2 - 1)) / 1.0;
        }

        if (q3_list.size() % 2 == 0) { //çift even
            q3 = ((int) q3_list.get((q3_list.size() - 1) / 2) + (int) q3_list.get(q3_list.size() / 2)) / 2.0;
        } else {
            q3 = (int) q3_list.get(((q3_list.size() + 1) / 2 - 1)) / 1.0;
        }
        label_txt.setText("Q1, Q2, Q3: ");
        text_txt.setText(String.valueOf(q1 + " " + q2 + " " + q3));

        min = q1 - (1.5 * (q3 - q1));
        max = q3 + (1.5 * (q3 - q1));
        outlierListModel.addElement("Min eleman " + min);
        outlierListModel.addElement("Max eleman " + max);

        ArrayList outliersList = new ArrayList();
        outlierListModel.addElement("Outliers");
        for (int i = 0; i < sortedList.length; i++) {
            if (sortedList[i] > max | sortedList[i] < min) {
                outlierListModel.addElement(sortedList[i]);
            }
        }
    }//GEN-LAST:event_outliers_buttonActionPerformed

    private void data_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_buttonActionPerformed
        jTable1.setVisible(true);
        table.setRowCount(0);
        try {
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/sample", "app", "app");
            Statement s = con.createStatement();
            ResultSet rs = s.executeQuery("select * FROM ARTWORKS");
            while (rs.next()) {
                table.addRow(new Object[]{rs.getInt("PAINTINGS"), rs.getString("NAME")});
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Something wrong,try again....");
        }
    }//GEN-LAST:event_data_buttonActionPerformed

    private void con_interval_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_con_interval_buttonActionPerformed
        double sum = 0.0, d1, d2, z_alpha, alpha, mean_c;
        double array[] = {137, 126, 171, 439, 141, 328, 31, 47, 67, 66, 91, 59, 81, 255, 262, 702, 81, 186, 128, 143, 55, 164, 119, 239, 134, 259, 70, 43, 84, 188, 102, 181, 311, 109, 49, 24, 336};
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }
        mean_c = sum / array.length;
        if (sample_variance == 0) {
            double sum_s = 0;
            for (int i = 0; i < numbers.size(); i++) {
                sum_s += Math.pow((numbers.get(i) - mean_c), 2);
            }
            double samp = sum_s / (numbers.size() - 1);
            sd_c = Math.sqrt(samp);
        } else {
            sd_c = Math.sqrt(sample_variance);
        }
        alpha = 0.05;
        alpha /= 2;
        z_alpha = 1.96;
        d1 = mean_c - (z_alpha) * (sd_c / Math.sqrt(array.length));
        d2 = mean_c + (z_alpha) * (sd_c / Math.sqrt(array.length));
        text_txt.setText(new DecimalFormat("##.###").format(d1) + "   --   " + new DecimalFormat("##.###").format(d2));
        label_txt.setText("Confidence interval mean");
    }//GEN-LAST:event_con_interval_buttonActionPerformed

    private void step_eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_step_eightActionPerformed
        if (standartDeviation == 0) {
            JOptionPane.showMessageDialog(rootPane, "please find standart deviation from dataset");
        } else {
            double margin = 0.1;
            double alpha = 0.1;
            alpha = alpha / 2;
            double z_alpha = 1.645;
            double n = Math.pow(((z_alpha * standartDeviation) / margin), 2);
            text_txt.setText(String.valueOf(n + 1));
            label_txt.setText("Margin n:");
        }
    }//GEN-LAST:event_step_eightActionPerformed

    private void con_interval_varianceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_con_interval_varianceActionPerformed
        double sum = 0.0;
        double array[] = {137, 126, 171, 439, 141, 328, 31, 47, 67, 66, 91, 59, 81, 255, 262, 702, 81, 186, 128, 143, 55, 164, 119, 239, 134, 259, 70, 43, 84, 188, 102, 181, 311, 109, 49, 24, 336};
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }
        double mean_c = sum / array.length;

        double sum_s = 0;
        for (int i = 0; i < array.length; i++) {
            sum_s += Math.pow((array[i] - mean_c), 2);
        }

        double samp = sum_s / (array.length - 1);
        sd_c = Math.sqrt(samp);
        double alpha = 0.05;
        alpha = alpha / 2;
        double x_alpha = 54.4;
        double x_1_alpha = 21.3;

        double d1 = ((array.length - 1) * samp) / x_alpha;
        double d2 = ((array.length - 1) * samp) / x_1_alpha;
        System.out.println(" ");
        text_txt.setText(new DecimalFormat("##.###").format(d1) + "   --   " + new DecimalFormat("##.###").format(d2));
        label_txt.setText("Confidence interval variance");
    }//GEN-LAST:event_con_interval_varianceActionPerformed

    private void Histogram_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Histogram_buttonActionPerformed

        int len = numbers.size();

        double[] sortList = new double[len];
        for (int i = 0; i < len; i++) {
            sortList[i] = numbers.get(i);
        }
        Arrays.sort(sortList);
        int bin = 7; //log 2 tabanında 50 =5,5 gelir 1 fazlası yuvarladım

        HistogramDataset dataset = new HistogramDataset();

        dataset.setType(HistogramType.FREQUENCY);
        dataset.addSeries("Histogram", sortList, bin);
        String plotTitle = "Histogram";
        String xaxis = "number";
        String yaxis = "value";

        PlotOrientation orientation = PlotOrientation.VERTICAL;

        JFreeChart chart = ChartFactory.createHistogram(plotTitle, xaxis, yaxis,
                dataset, orientation, false, false, false);

        ChartFrame chartfrm = new ChartFrame("numbers", chart, true);
        chartfrm.setVisible(true);
        chartfrm.setSize(1000, 1000);

    }//GEN-LAST:event_Histogram_buttonActionPerformed

    private void boxplot_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxplot_buttonActionPerformed
        // TODO add your handling code here:
        jList1.removeAll();
        jList1.setVisible(true);
        int fivepoint[] = new int[7];
        int len = numbers.size();

        double[] sortList = new double[len];
        for (int i = 0; i < len; i++) {
            sortList[i] = numbers.get(i);
        }
        Arrays.sort(sortList);
        fivepoint[0] = (int) sortList[0];
        fivepoint[4] = (int) sortList[len - 1];
        if (len % 2 == 0) { //çift even median = sortedList[(lenght + 1) / 2 - 1] / 1.0;
            p_median = (sortList[(len - 1) / 2] + sortList[len / 2]) / 2.0;
        } else {
            p_median = sortList[(len + 1) / 2 - 1] / 1.0;
        }
        fivepoint[2] = (int) p_median;

        if (q1 == 0 || q3 == 0) {
            ArrayList q1_list = new ArrayList();
            ArrayList q3_list = new ArrayList();
            for (int i = 0; i < sortList.length; i++) {
                if (sortList[i] < p_median) {
                    q1_list.add(i, sortList[i]);
                }
                if (sortList[i] > p_median) {
                    q3_list.add(sortList[i]);
                }
            }
            if (q1_list.size() % 2 == 0) { //çift even
                q1 = ((int) q1_list.get((q1_list.size() - 1) / 2) + (int) q1_list.get(q1_list.size() / 2)) / 2.0;
            } else {
                // q1=((int) ((q1_list.size() - 1) / 2.0));
                q1 = ((double) (q1_list.get(((q1_list.size() + 1) / 2 - 1))) / 1.0);
            }

            if (q3_list.size() % 2 == 0) { //çift even
                q3 = ((int) q3_list.get((q3_list.size() - 1) / 2) + (int) q3_list.get(q3_list.size() / 2)) / 2.0;
            } else {
                q3 = ((double) q3_list.get(((q3_list.size() + 1) / 2 - 1)) / 1.0);
            }
        }
        fivepoint[1] = (int) q1;
        fivepoint[3] = (int) q3;
        outlierListModel.removeAllElements();
        outlierListModel.addElement("Min --> " + fivepoint[0]); //from data
        outlierListModel.addElement("Q1 --> " + fivepoint[1]);
        outlierListModel.addElement("Q2 --> " + fivepoint[2]);
        outlierListModel.addElement("Q3 --> " + fivepoint[3]);
        outlierListModel.addElement("Max --> " + fivepoint[4]); //from data

        if (max == 0 || min == 0) {
            JOptionPane.showMessageDialog(rootPane, "Please find min and max data from outliers button");

        }
        fivepoint[5] = (int) min;
        fivepoint[6] = (int) max;
        outlierListModel.addElement("Min eleman " + min);
        outlierListModel.addElement("Max eleman " + (int) max);
        for (int i = (int) min; i < fivepoint[4]; i++) {
            for (int j = 0; j < fivepoint.length; j++) {
                if (i != fivepoint[j]) {
                    System.out.print("*");
                } else {
                    System.out.print(" " + fivepoint[j] + " ");
                }
            }
            if (i > max) {
                System.out.println("This is outliers");
                break;
            }

        }

        /*
         [--------------min--------------------Q1--------------------Q2------------------------Q3-------------------------]   --> --------------------max--
         -87            24                     81                    123                       193                      361   outliers                 877  
        
         */

    }//GEN-LAST:event_boxplot_buttonActionPerformed

    private void clear_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_buttonActionPerformed
        // TODO add your handling code here:
        jList1.removeAll();
        outlierListModel.removeAllElements();
        text_txt.setText(null);

    }//GEN-LAST:event_clear_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Page.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Page.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Page.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Page.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Histogram_button;
    private javax.swing.JButton StandartError_button;
    private javax.swing.JButton boxplot_button;
    private javax.swing.JButton clear_button;
    private javax.swing.JButton con_interval_button;
    private javax.swing.JButton con_interval_variance;
    private javax.swing.JButton data_button;
    private javax.swing.JButton find_shape_button;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel label_txt;
    private javax.swing.JButton mean_button;
    private javax.swing.JButton median_button;
    private javax.swing.JButton outliers_button;
    private javax.swing.JButton standartDeviation_button;
    private javax.swing.JButton step_eight;
    private javax.swing.JTextField text_txt;
    private javax.swing.JButton variance_button;
    // End of variables declaration//GEN-END:variables
}
